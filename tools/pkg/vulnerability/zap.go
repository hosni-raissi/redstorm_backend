package vulnerability

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"github.com/spf13/cobra"
)

type ZAPIssue struct {
	Name, Risk, URL, Param, Evidence, Solution, Reference, Description string
}

func NewZAPCommand() *cobra.Command {
	var target string
	cmd := &cobra.Command{
		Use:   "zap",
		Short: "OWASP ZAP baseline scanner (Docker wrapper, ≤ 90 s, 1 GB cap)",
		Run: func(cmd *cobra.Command, args []string) {
			if target == "" {
				fmt.Println("❗  -t <target> required")
				os.Exit(1)
			}
			// ensure scheme
			if !strings.HasPrefix(target, "http://") && !strings.HasPrefix(target, "https://") {
				target = "http://" + target
			}
			RunZAP(target)
		},
	}
	cmd.Flags().StringVarP(&target, "target", "t", "", "Target URL")
	return cmd
}

func RunZAP(target string) {
	fmt.Println("ZAP       : pulling / starting container …")
	ctx, cancel := context.WithTimeout(context.Background(), 90*time.Second)
	defer cancel()

	tmpDir := filepath.Join(os.TempDir(), "zap-"+fmt.Sprintf("%d", time.Now().Unix()))
	_ = os.MkdirAll(tmpDir, 0755)
	defer os.RemoveAll(tmpDir)
	resultFile := filepath.Join(tmpDir, "zap.json")

	args := []string{
		"run", "--rm",
		"--memory", "1g",
		"-v", tmpDir + ":/zap/wrk:rw",
		"ghcr.io/zaproxy/zaproxy:stable",
		"zap-baseline.py",
		"-t", target,
		"-T", "90",
		"-J", "/zap/wrk/zap.json",
		"-I",
	}

	cmd := exec.CommandContext(ctx, "docker", args...)
	stderr, _ := cmd.StderrPipe()
	if err := cmd.Start(); err != nil {
		fmt.Fprintf(os.Stderr, "ZAP start error: %v\n", err)
		printEmpty()
		return
	}
	// show ZAP logs in real time
	go io.Copy(os.Stderr, stderr)

	if err := cmd.Wait(); err != nil {
		// non-zero exit is normal for baseline with findings – keep going
	}

	/* ---- wait until file exists and is non-empty ---- */
	deadline := time.Now().Add(5 * time.Second)
	for {
		if info, err := os.Stat(resultFile); err == nil && info.Size() > 0 {
			break
		}
		if time.Now().After(deadline) {
			fmt.Fprintln(os.Stderr, "ZAP timeout waiting for output file")
			printEmpty()
			return
		}
		time.Sleep(200 * time.Millisecond)
	}

	raw, _ := os.ReadFile(resultFile)
	var list []ZAPIssue
	if err := json.Unmarshal(raw, &list); err != nil || list == nil {
		fmt.Fprintf(os.Stderr, "ZAP unmarshal error (or empty): %v\n", err)
		printEmpty()
		return
	}

	/* ---- map to agent schema ---- */
	type agentFmt struct {
		Vulnerabilities []struct {
			TemplateID  string `json:"template_id"`
			Name        string `json:"name"`
			Severity    string `json:"severity"`
			MatchedAt   string `json:"matched_at"`
			Description string `json:"description"`
		} `json:"vulnerabilities"`
	}
	var out agentFmt
	for _, z := range list {
		sev := strings.ToLower(z.Risk)
		switch sev {
		case "high", "medium", "low":
		default:
			sev = "info"
		}
		out.Vulnerabilities = append(out.Vulnerabilities, struct {
			TemplateID  string `json:"template_id"`
			Name        string `json:"name"`
			Severity    string `json:"severity"`
			MatchedAt   string `json:"matched_at"`
			Description string `json:"description"`
		}{
			TemplateID:  "zap-" + strings.ReplaceAll(z.Name, " ", "-"),
			Name:        z.Name,
			Severity:    sev,
			MatchedAt:   z.URL,
			Description: fmt.Sprintf("%s (param=%s  evidence=%s)  Solution: %s",
				z.Description, z.Param, z.Evidence, z.Solution),
		})
	}
	_ = json.NewEncoder(os.Stdout).Encode(out)
}

func printEmpty() {
	_ = json.NewEncoder(os.Stdout).Encode(map[string]interface{}{
		"vulnerabilities": []interface{}{},
	})
}